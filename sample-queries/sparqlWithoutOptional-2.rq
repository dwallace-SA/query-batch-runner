# Find queries that might need to include OPTIONAL based on as-used min cardinality 0
# includes the case where semicolons are not used, so the class and outbound property are in different statements
# requires manual review of results to verify that the property is being used with a member of the class
# a more precise query might be possible, but regex gave some trouble so the query does not use it to identify the statement with the property
# used concat within the regex statements to eliminate one level of indirection

prefix gist:  <https://w3id.org/semanticarts/ns/ontology/gist/>
prefix gistd: <https://w3id.org/semanticarts/ns/data/gist/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

prefix dcao: <https://ontologies.semanticarts.com/dcao/>
prefix sao:   <https://ontologies.semanticarts.com/SemArts/>
prefix ibbeo: <https://ontologies.industrybuildingblocks.com/ibbeo/>
prefix ex: <http://example.org/>

select distinct ?variable ?classString ?outboundPropertyString ?sparqlSnippet 

where {

  # class/property with as-used cardinality zero
    { ######################################################
    select distinct ?class ?outboundProperty
    where {
          { ####################################################### subquery 1
            # outbound properties used with each class
            select distinct ?class ?outboundProperty
            where {
               ?s a ?class ;
                  ?outboundProperty ?o .
            } 
          } ####################################################### end of subquery 1
     
       ?s a ?class
       filter not exists {?s ?outboundProperty ?o .}
    }
    } ######################################################
  
  bind(replace(str(?class),            "^.*[#/]", ":") as ?classString)
  bind(replace(str(?outboundProperty), "^.*[#/]", ":") as ?outboundPropertyString)
  
  # get the SPARQL queries
  ?executableType rdf:type dcao:SPARQLQueryType .
  ?executable rdf:type dcao:Executable ;
              gist:categorizedBy ?executableType ;  # the executable is one of the SPARQL query types
              dcao:hasExecutableContent ?sparql .   


  # format SPARQL query and remove OPTIONAL and FILTER NOT EXIST sections (does not do nesting cleanly)
  bind(replace(str(?sparql),   "[^ -~]", " ")                            as ?sparqlString1)  # remove unprintable characters
  bind(replace(?sparqlString1, " [ ]+", " ")                             as ?sparqlString2)  # replace multiple spaces with one

  bind(replace(?sparqlString2, "OPTIONAL.*\\{[^{}]*\\{[^{}]*\\{[^{}]*\\}[^}]*\\}[^{}]*\\}", "", "i") as ?sparqlString3)
  bind(replace(?sparqlString3, "OPTIONAL.*\\{[^{}]*\\{[^{}]*\\}[^{}]*\\}", "", "i")                  as ?sparqlString4)
  bind(replace(?sparqlString4, "OPTIONAL.*\\{[^{}]*\\}", "", "i")                                    as ?sparqlString5)
  
  bind(replace(?sparqlString5, "FILTER NOT EXISTS.*\\{[^{}]*\\{[^{}]*\\{[^{}]*\\}[^}]*\\}[^{}]*\\}", "", "i") as ?sparqlString6)
  bind(replace(?sparqlString6, "FILTER NOT EXISTS.*\\{[^{}]*\\{[^{}]*\\}[^{}]*\\}", "", "i")                  as ?sparqlString7)
  bind(replace(?sparqlString7, "FILTER NOT EXISTS.*\\{[^{}]*\\}", "", "i")                                    as ?sparqlString8)

  bind(replace(?sparqlString8, "^.*WHERE", "WHERE", "i")                 as ?sparqlString) 
  
  filter(regex(?sparqlString, concat("rdf:type [^ ]+", ?classString, " [.]")))

  bind(replace(?sparqlString,  concat(".*([?][^ ]+ rdf:type [^ ]+[^ ]+", ?classString, ".*)$"), "$1") as ?sparqlSnippet)
  bind(replace(?sparqlSnippet, concat(".*([?][^ ]+) rdf:type [^ ]+[^ ]+", ?classString, ".*"), "$1") as ?variable)
  
  filter(contains(?sparqlSnippet, ?outboundPropertyString))

  }
order by ?variable ?classString ?outboundPropertyString                                           
