# Find SPARQL queries that might need to include OPTIONAL based on as-used min cardinality 0
# includes only the case where semicolons are used in the SPARQL, with class and outbound property in the same statement

prefix gist:  <https://w3id.org/semanticarts/ns/ontology/gist/>
prefix gistd: <https://w3id.org/semanticarts/ns/data/gist/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

prefix dcao: <https://ontologies.semanticarts.com/dcao/>
prefix sao:   <https://ontologies.semanticarts.com/SemArts/>
prefix ibbeo: <https://ontologies.industrybuildingblocks.com/ibbeo/>
prefix ex: <http://example.org/>

select distinct ?classString ?outboundPropertyString ?matched ?executable ?sparqlString2

where {
  # class/property with as-used cardinality zero (copy-paste result of separate query)
    { ######################################################
    select distinct ?class ?outboundProperty
    where {
          { ####################################################### subquery 1
            # outbound properties used with each class
            select distinct ?class ?outboundProperty
            where {
               ?s a ?class ;
                  ?outboundProperty ?o .
            } 
          } ####################################################### end of subquery 1
     
       ?s a ?class
       filter not exists {?s ?outboundProperty ?o .}
    }
    } ######################################################
  
  bind(replace(str(?class),            "^.*[#/]", ":") as ?classString)
  bind(replace(str(?outboundProperty), "^.*[#/]", ":") as ?outboundPropertyString)
  
  
  # get the SPARQL queries
  ?executableType rdf:type dcao:SPARQLQueryType .
  ?executable rdf:type dcao:Executable ;
              gist:categorizedBy ?executableType ;  # the executable is one of the SPARQL query types
              dcao:hasExecutableContent ?sparql .   


# format SPARQL query and remove OPTIONAL and FILTER NOT EXIST sections
  bind(replace(str(?sparql),   "[^ -~]", " ") as ?sparqlString1)
  bind(replace(?sparqlString1, " [ ]+", " ")  as ?sparqlString2)

  bind(replace(?sparqlString2, "OPTIONAL.*\\{[^{}]*\\{[^{}]*\\{[^{}]*\\}[^}]*\\}[^{}]*\\}", "", "i") as ?sparqlString3)
  bind(replace(?sparqlString3, "OPTIONAL.*\\{[^{}]*\\{[^{}]*\\}[^{}]*\\}", "", "i")                  as ?sparqlString4)
  bind(replace(?sparqlString4, "OPTIONAL.*\\{[^{}]*\\}", "", "i")                                    as ?sparqlString5)
  
  bind(replace(?sparqlString5, "FILTER NOT EXISTS.*\\{[^{}]*\\{[^{}]*\\{[^{}]*\\}[^}]*\\}[^{}]*\\}", "", "i") as ?sparqlString6)
  bind(replace(?sparqlString6, "FILTER NOT EXISTS.*\\{[^{}]*\\{[^{}]*\\}[^{}]*\\}", "", "i")                  as ?sparqlString7)
  bind(replace(?sparqlString7, "FILTER NOT EXISTS.*\\{[^{}]*\\}", "", "i")                                    as ?sparqlString8)

  bind(replace(?sparqlString8, "^.*WHERE", "WHERE", "i") as ?sparqlString)
  
  # find SPARQL queries that have the class and property in a single statement ending with "."
  bind(concat(".*([?][^ ]* rdf:type [a-z]+", ?classString, "[^.]*", ?outboundPropertyString, "[^.]*[.]).*")  as ?matchString)
  filter(regex(?sparqlString, ?matchString))

  # extract the statement with the class and property
  bind(replace(?sparqlString, ?matchString, "$1") as ?matched)
  
  }
order by ?classString ?outboundPropertyString
